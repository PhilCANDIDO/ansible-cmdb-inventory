---
# tasks/validate.yml - Validation des prérequis pour la génération du rapport

# Vérifier la famille de distribution Linux pour adapter les commandes d'installation
- name: Obtenir les informations de la distribution
  setup:
    gather_subset:
      - '!all'
      - 'distribution'
  delegate_to: localhost
  become: false
  tags:
    - validate
    - os_check

# Installer les packages nécessaires pour l'environnement virtuel selon la distribution
- name: Installer les packages nécessaires pour les environnements virtuels (Debian/Ubuntu)
  apt:
    name:
      - python3-venv
      - python3-full
    state: present
  delegate_to: localhost
  become: true
  when: ansible_os_family == "Debian"
  ignore_errors: true
  register: venv_packages_debian
  tags:
    - validate
    - dependencies

- name: Installer les packages nécessaires pour les environnements virtuels (RedHat/CentOS)
  yum:
    name:
      - python3
      - python3-devel
    state: present
  delegate_to: localhost
  become: true
  when: ansible_os_family == "RedHat"
  ignore_errors: true
  register: venv_packages_redhat
  tags:
    - validate
    - dependencies

- name: Installer les packages nécessaires pour les environnements virtuels (SUSE)
  zypper:
    name:
      - python3
      - python3-devel
    state: present
  delegate_to: localhost
  become: true
  when: ansible_os_family == "Suse"
  ignore_errors: true
  register: venv_packages_suse
  tags:
    - validate
    - dependencies

# Créer un environnement virtuel pour l'exécution du script
- name: Créer un environnement virtuel Python
  command: "python3 -m venv {{ cmdb_report.temp_dir }}/venv"
  args:
    creates: "{{ cmdb_report.temp_dir }}/venv"
  delegate_to: localhost
  become: false
  register: venv_creation
  tags:
    - validate
    - dependencies

# Mettre à jour pip dans l'environnement virtuel
- name: Mettre à jour pip dans l'environnement virtuel
  pip:
    name: pip
    state: latest
    virtualenv: "{{ cmdb_report.temp_dir }}/venv"
  delegate_to: localhost
  become: false
  register: pip_update
  until: pip_update is success
  retries: 3
  delay: 5
  tags:
    - validate
    - dependencies

# Installer les dépendances Python dans l'environnement virtuel
- name: Installer les dépendances Python dans l'environnement virtuel
  pip:
    name:
      - openpyxl>=3.0.0
      - jmespath>=0.10.0
    state: present
    virtualenv: "{{ cmdb_report.temp_dir }}/venv"
  delegate_to: localhost
  become: false
  register: pip_install
  until: pip_install is success
  retries: 3
  delay: 5
  tags:
    - validate
    - dependencies

# Vérifier que les modules sont correctement installés
- name: Vérifier l'installation des modules dans l'environnement virtuel
  command: "{{ cmdb_report.temp_dir }}/venv/bin/python3 -c 'import {{ item }}'"
  with_items:
    - openpyxl
    - jmespath
    - json
  delegate_to: localhost
  register: module_check
  failed_when: false
  changed_when: false
  ignore_errors: true
  tags:
    - validate
    - dependencies

# Afficher un avertissement si certains modules ne sont pas disponibles
- name: Afficher un avertissement pour les modules manquants
  debug:
    msg: "Attention: le module {{ item.item }} n'est pas disponible. La génération du rapport pourrait échouer."
  loop: "{{ module_check.results }}"
  when: item.rc != 0
  tags:
    - validate
    - dependencies

# Vérifier l'existence du répertoire repository
- name: Vérifier l'accès au répertoire repository
  stat:
    path: "{{ cmdb_repository.directory }}/reports"
  register: repository_dir_stat
  # Utiliser localhost comme fallback si cmdb_manager_host n'est pas défini
  delegate_to: "{{ cmdb_manager_host | default('localhost') }}"
  become: false
  ignore_errors: true
  tags:
    - validate
    - repository

- name: Créer les répertoires repository si nécessaire (local)
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "{{ cmdb_repository.directory }}"
    - "{{ cmdb_repository.directory }}/reports"
    - "{{ cmdb_repository.directory }}/diagnostics"
  when: 
    - not repository_dir_stat.stat.exists | default(false)
    - cmdb_repository_mode == 'local'
  delegate_to: localhost
  become: false
  ignore_errors: true
  tags:
    - validate
    - repository

- name: Échec si le répertoire repository n'existe pas et n'a pas pu être créé
  fail:
    msg: >-
      Le répertoire repository '{{ cmdb_repository.directory }}/reports' n'existe pas sur 
      {{ cmdb_manager_host | default('localhost') }} et n'a pas pu être créé automatiquement.
      Veuillez le créer manuellement ou utiliser un répertoire différent.
  when: 
    - not repository_dir_stat.stat.exists | default(false)
    - cmdb_repository_mode != 'local'
  tags:
    - validate
    - repository

# Vérifier la possibilité de créer le répertoire temporaire
- name: Créer le répertoire temporaire pour le traitement
  file:
    path: "{{ cmdb_report.temp_dir }}"
    state: directory
    mode: '0755'
  delegate_to: localhost
  become: false
  register: temp_dir_creation
  tags:
    - validate
    - tempdir

- name: Échec si le répertoire temporaire ne peut pas être créé
  fail:
    msg: "Impossible de créer le répertoire temporaire '{{ cmdb_report.temp_dir }}' sur localhost."
  when: temp_dir_creation is failed
  tags:
    - validate
    - tempdir

# Si envoi par email activé, vérifier la configuration
- name: Vérifier la configuration email
  assert:
    that:
      - cmdb_email.smtp.host != ""
      - cmdb_email.smtp.port | int > 0
      - cmdb_email.from != ""
      - cmdb_email.to | length > 0
    fail_msg: "Configuration email incomplète. Vérifiez les paramètres cmdb_email."
    success_msg: "Configuration email valide."
  when: cmdb_email.enabled | bool
  tags:
    - validate
    - email