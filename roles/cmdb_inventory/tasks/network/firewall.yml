# ==== tasks/network/firewall.yml ====
---
- name: Collecter la configuration du firewall
  block:
    - name: Détecter le type de firewall (iptables, firewalld, ufw)
      set_fact:
        firewall_type: >-
          {% if ansible_os_family == 'Debian' and ansible_distribution_major_version | int >= 8 %}
          ufw
          {% elif ansible_os_family == 'RedHat' and ansible_distribution_major_version | int >= 7 %}
          firewalld
          {% else %}
          iptables
          {% endif %}

    - name: Collecter les règles de firewall (iptables)
      shell: "iptables -L -n"
      register: iptables_rules
      changed_when: false
      failed_when: false
      become: true
      when: firewall_type == 'iptables'

    - name: Collecter les règles de firewall (firewalld)
      shell: "firewall-cmd --list-all"
      register: firewalld_rules
      changed_when: false
      failed_when: false
      become: true
      when: firewall_type == 'firewalld'

    - name: Collecter les règles de firewall (ufw)
      shell: "ufw status verbose"
      register: ufw_rules
      changed_when: false
      failed_when: false
      become: true
      when: firewall_type == 'ufw'

    - name: Ajouter les règles de firewall aux informations réseau
      set_fact:
        network_info: "{{ network_info | combine({
          'firewall': {
            'type': firewall_type,
            'rules': 
              (iptables_rules.stdout_lines | default([])) if firewall_type == 'iptables' else
              (firewalld_rules.stdout_lines | default([])) if firewall_type == 'firewalld' else
              (ufw_rules.stdout_lines | default([]))
          }
        }) }}"
  rescue:
    - name: Définir les informations de firewall comme non disponibles
      set_fact:
        network_info: "{{ network_info | combine({
          'firewall': {
            'available': false,
            'note': 'Informations de firewall non disponibles'
          }
        }) }}"