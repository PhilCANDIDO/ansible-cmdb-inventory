# roles/cmdb_inventory/tasks/copy_to_repository.yml
---
# Transfert des fichiers temporaires vers le serveur repository

- name: (copy_to_repository) Débogage des chemins
  debug:
    msg: 
      - "Repository host: {{ cmdb_inventory_repository_host }}"
      - "Repository dir: {{ cmdb_inventory_repository_dir }}"
  run_once: true

# Utiliser une tâche locale pour vérifier si les fichiers existent
- name: (copy_to_repository) Tâches de vérification locale pour les fichiers
  block:
    - name: (copy_to_repository) Définir les chemins de fichiers sur le contrôleur Ansible
      set_fact:
        controller_temp_dir: "/tmp/cmdb_temp_{{ ansible_date_time.date | default('now') | replace('-', '') }}"
        controller_inventory_file: "/tmp/cmdb_temp_{{ ansible_date_time.date | default('now') | replace('-', '') }}/{{ inventory_hostname }}_cmdb_inventory.{{ cmdb_output_format }}"
        controller_diagnostic_dir: "/tmp/cmdb_temp_{{ ansible_date_time.date | default('now') | replace('-', '') }}/diagnostics"
        controller_diagnostic_file: "/tmp/cmdb_temp_{{ ansible_date_time.date | default('now') | replace('-', '') }}/diagnostics/{{ inventory_hostname }}_diagnostic.yml"

    - name: (copy_to_repository) Afficher le chemin du fichier d'inventaire
      debug:
        msg: "{{ controller_inventory_file }}"

    # Exécuter une commande shell pour vérifier l'existence du fichier plutôt que d'utiliser le module stat
    - name: (copy_to_repository) Vérifier si le fichier d'inventaire existe sur le contrôleur
      shell: "test -f {{ controller_inventory_file }} && echo 'exists' || echo 'not_exists'"
      register: inventory_file_check
      changed_when: false
      delegate_to: localhost
      become: false

    - name: (copy_to_repository) Définir l'état du fichier d'inventaire
      set_fact:
        inventory_file_exists: "{{ inventory_file_check.stdout == 'exists' }}"

    - name: (copy_to_repository) Afficher l'état du fichier d'inventaire
      debug:
        msg: "Le fichier d'inventaire {{ 'existe' if inventory_file_exists else 'n''existe pas' }}"

    # Vérifier le répertoire de diagnostics avec shell
    - name: (copy_to_repository) Vérifier si le répertoire de diagnostics existe sur le contrôleur
      shell: "test -d {{ controller_diagnostic_dir }} && echo 'exists' || echo 'not_exists'"
      register: diagnostic_dir_check
      changed_when: false
      delegate_to: localhost
      become: false
      when: cmdb_collect.self_diagnostic | default(true) | bool

    - name: (copy_to_repository) Définir l'état du répertoire de diagnostics
      set_fact:
        diagnostic_dir_exists: "{{ diagnostic_dir_check.stdout == 'exists' if diagnostic_dir_check is defined else false }}"
      when: cmdb_collect.self_diagnostic | default(true) | bool

    # Vérifier le fichier de diagnostic avec shell
    - name: (copy_to_repository) Vérifier si le fichier de diagnostic existe sur le contrôleur
      shell: "test -f {{ controller_diagnostic_file }} && echo 'exists' || echo 'not_exists'"
      register: diagnostic_file_check
      changed_when: false
      delegate_to: localhost
      become: false
      when: 
        - cmdb_collect.self_diagnostic | default(true) | bool
        - diagnostic_dir_exists | default(false)

    - name: (copy_to_repository) Définir l'état du fichier de diagnostic
      set_fact:
        diagnostic_file_exists: "{{ diagnostic_file_check.stdout == 'exists' if diagnostic_file_check is defined else false }}"
      when: cmdb_collect.self_diagnostic | default(true) | bool

    - name: (copy_to_repository) Afficher le chemin du fichier diagnostic
      debug:
        msg: "{{ controller_diagnostic_file }} - {{ 'existe' if diagnostic_file_exists | default(false) else 'n''existe pas' }}"
      when: cmdb_collect.self_diagnostic | default(true) | bool

  delegate_to: localhost
  become: false
  connection: local

# Créer les répertoires de destination sur le repository
- name: (copy_to_repository) Créer le répertoire reports sur le serveur repository si nécessaire
  file:
    path: "{{ cmdb_inventory_repository_dir }}/reports"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user | default('ansible') }}"
    group: "{{ ansible_user | default('ansible') }}"
  delegate_to: "{{ cmdb_inventory_repository_host }}"
  become: true
  run_once: true
  ignore_errors: true
  when: inventory_file_exists | default(false)

# Copier le fichier d'inventaire avec une tâche shell déléguée
- name: (copy_to_repository) Copier le fichier d'inventaire vers le repository
  shell: "cp {{ controller_inventory_file }} {{ cmdb_inventory_repository_dir }}/reports/{{ inventory_hostname }}_cmdb_inventory.{{ cmdb_output_format }}"
  delegate_to: localhost
  become: false
  ignore_errors: true
  changed_when: true
  when: inventory_file_exists | default(true) or force_copy_files | default(false)
  register: copy_result
  connection: local

# Créer le répertoire diagnostics sur le serveur repository si nécessaire
- name: (copy_to_repository) Créer le répertoire diagnostics sur le serveur repository si nécessaire
  file:
    path: "{{ cmdb_inventory_repository_dir }}/diagnostics"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user | default('ansible') }}"
    group: "{{ ansible_user | default('ansible') }}"
  delegate_to: "{{ cmdb_inventory_repository_host }}"
  become: true
  run_once: true
  ignore_errors: true
  when: 
    - cmdb_collect.self_diagnostic | default(true) | bool
    - diagnostic_file_exists | default(false)

# Copier le fichier de diagnostic avec une tâche shell déléguée
- name: (copy_to_repository) Copier le fichier de diagnostic vers le repository
  shell: "cp {{ controller_diagnostic_file }} {{ cmdb_inventory_repository_dir }}/diagnostics/{{ inventory_hostname }}_diagnostic.yml"
  delegate_to: localhost
  become: false
  ignore_errors: true
  changed_when: true
  when: 
    - cmdb_collect.self_diagnostic | default(true) | bool
    - diagnostic_file_exists | default(false)
  register: diag_copy_result
  connection: local

# Journaliser l'achèvement du transfert
- name: (copy_to_repository) Journaliser l'achèvement du transfert dans le repository
  lineinfile:
    path: "{{ cmdb_inventory_repository_dir }}/inventaire_success.log"
    line: "{{ inventory_hostname }} - {{ ansible_date_time.iso8601 | default(now()) }}"
    create: yes
  delegate_to: "{{ cmdb_inventory_repository_host }}"
  become: true
  ignore_errors: true
  when: copy_result is success

# Enregistrer les informations sur ce transfert
- name: (copy_to_repository) Enregistrer les métadonnées de ce transfert
  set_fact:
    cmdb_inventory_transferred: true
    cmdb_inventory_transfer_time: "{{ ansible_date_time.iso8601 | default(now()) }}"
  when: copy_result is success